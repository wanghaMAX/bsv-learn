//
// Generated by Bluespec Compiler, version 2021.07-10-gb37e90ec (build b37e90ec)
//
// On Thu Nov  4 17:46:40 CST 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module commonTb(CLK,
		RST_N);
  input  CLK;
  input  RST_N;

  // register int16
  reg [15 : 0] int16;
  wire [15 : 0] int16$D_IN;
  wire int16$EN;

  // register step
  reg [31 : 0] step;
  wire [31 : 0] step$D_IN;
  wire step$EN;

  // register uint16
  reg [15 : 0] uint16;
  wire [15 : 0] uint16$D_IN;
  wire uint16$EN;

  // remaining internal signals
  wire [15 : 0] IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16;

  // register int16
  assign int16$D_IN =
	     int16[15] ?
	       -IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16 :
	       IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16 ;
  assign int16$EN = 1'b0 ;

  // register step
  assign step$D_IN = step + 32'd1 ;
  assign step$EN =
	     step == 32'd3 || step == 32'd2 || 1'b0 || step == 32'd0 ||
	     step == 32'd1 ;

  // register uint16
  assign uint16$D_IN = 16'h0 ;
  assign uint16$EN = 1'b0 ;

  // remaining internal signals
  assign IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16 =
	     (int16[15] ? -int16 : int16) >> 2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        int16 <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	step <= `BSV_ASSIGNMENT_DELAY 32'd0;
	uint16 <= `BSV_ASSIGNMENT_DELAY 16'h0800;
      end
    else
      begin
        if (int16$EN) int16 <= `BSV_ASSIGNMENT_DELAY int16$D_IN;
	if (step$EN) step <= `BSV_ASSIGNMENT_DELAY step$D_IN;
	if (uint16$EN) uint16 <= `BSV_ASSIGNMENT_DELAY uint16$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    int16 = 16'hAAAA;
    step = 32'hAAAAAAAA;
    uint16 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) if (step == 32'd1) $display("Zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("== step 0 ==");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("foo = %x", $unsigned(16'h1FFF));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("foo = %x", $unsigned(16'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("foo = %x", $unsigned(16'hFFFF));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("foo = %x", $unsigned(16'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("fooneg = %x", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("maxUInt16 = %x", $unsigned(16'hFFFF));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0) $display("minUInt16 = %x", $unsigned(16'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd0)
	$display("%x < %x = %x", $unsigned(16'd0), $unsigned(16'hFFFF), 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd2) $display("== step 2 ==");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd2) $display("foo is 32 bits %b", $signed(32'd10));
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd2) $display("this is 1 bit = %b", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd3) $display("== step 3 ==");
    if (RST_N != `BSV_RESET_VALUE) if (step == 32'd3) $display("b1 is True");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd4) $display("== step 4 ==");
    if (RST_N != `BSV_RESET_VALUE)
      if (step == 32'd4) $display("== All done ==");
    if (RST_N != `BSV_RESET_VALUE) if (step == 32'd4) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // commonTb

